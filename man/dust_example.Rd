% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example.R
\name{dust_example}
\alias{dust_example}
\title{Example generators}
\usage{
dust_example(name)
}
\arguments{
\item{name}{The name of the generator as a string; one of \code{sir},
\code{sirode} or \code{walk}.  See Details.}
}
\value{
A \code{dust_generator} object, which you might pass into
\code{dust_system_create}
}
\description{
Load example generators from dust2.  These generators exist
primarily for the examples and documentation and are not (yet)
very interesting.  The examples will likely change as the package
evolves and some may be removed.
}
\details{
All models exist as source code in the package; to view the \code{sir}
model you could write:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{file.show(system.file("examples/sir.cpp", package = "dust2"))
}\if{html}{\out{</div>}}
}
\section{\code{sir}}{
A simple SIR (Susceptible-Infected-Recovered) compartmental model.
This model has parameters:
\itemize{
\item \code{N}: total population size
\item \code{I0}: initial infected population size (when using
\link{dust_system_set_state_initial})
\item \code{beta}: per-contact rate of infection
\item \code{gamma}: rate of recovery
\item \code{exp_noise}: noise parameter used in the comparison to data
}

The system will have compartments \code{S}, \code{I}, \code{R}, \code{cases_cumul} and
\code{cases_inc}
}

\section{\code{sirode}}{
The same model as \code{sir} but in continuous time, deterministically
}

\section{\code{walk}}{
A random walk in discrete time with Gaussian increments.  This
model has parameters:
\itemize{
\item \code{sd}: The standard deviation of the Gaussian update (per unit time)
\item \code{len}: The number of independent walks
\item random_initial`: Boolean, indicating if the initial position
should be random (changes how \link{dust_system_set_state_initial}
would initialise the system)
}
}

\examples{
walk <- dust_example("walk")
walk()

sys <- dust_system_create(walk(), list(sd = 1), 20)
y <- dust_system_simulate(sys, 0:50)
matplot(t(y[1, , ]), type = "l", col = "#0000ff55", lty = 1,
        xlab = "Time", ylab = "Value")
}
