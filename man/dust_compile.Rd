% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{dust_compile}
\alias{dust_compile}
\title{Compile a dust2 system}
\usage{
dust_compile(
  filename,
  quiet = FALSE,
  workdir = NULL,
  linking_to = NULL,
  cpp_std = NULL,
  compiler_options = NULL,
  optimisation_level = NULL,
  debug = FALSE,
  skip_cache = FALSE
)
}
\arguments{
\item{filename}{The path to a single C++ file}

\item{quiet}{Logical, indicating if compilation messages from
\code{pkgbuild} should be displayed.  Error messages will be
displayed on compilation failure regardless of the value used.}

\item{workdir}{Optional working directory to use.  If \code{NULL}, the
behaviour depends on the existence of the environment variable
\code{DUST_WORKDIR_ROOT}.  If it is unset we use a session-specific
temporary directory (generated by \code{\link[=tempfile]{tempfile()}}).  If
\code{DUST_WORKDIR_ROOT} is set, then we use a stable generated
filename within this directory, which allows different sessions
to effectively share a cache.  If you pass a directory name here
as a string, then we will use that directory to write all code,
which allows you to inspect the generated code.  See
\code{vignette("details")} for more information.}

\item{linking_to}{Optionally, a character vector of additional
packages to add to the \code{DESCRIPTION}'s \code{LinkingTo} field. Use
this when your system pulls in C++ code that is packaged within
another package's header-only library.}

\item{cpp_std}{The C++ standard to use, if you need to set one
explicitly. See the section "Using C++ code" in "Writing R
extensions" for the details of this, and how it interacts with
the R version currently being used. For R 4.0.0 and above, C++11
will be used; as dust depends on at least this version of R you
will never need to specify a version this low. Sensible options
are \code{C++14}, \code{C++17}, etc, depending on the features you need
and what your compiler supports.}

\item{compiler_options}{A character vector of additional options
to pass through to the C++ compiler. These will be passed
through without any shell quoting or validation, so check the
generated commands and outputs carefully in case of error. Note
that R will apply these \emph{before} anything in your personal
\code{Makevars}.}

\item{optimisation_level}{A shorthand way of specifying common
compiler options that control optimisation level. By default
(\code{NULL}) no options are generated from this, and the
optimisation level will depend on your user \code{Makevars} file.
Valid options are \code{none} which disables optimisation (\code{-O0}),
which will be faster to compile but much slower, \code{standard}
which enables standard level of optimisation (\code{-O2}), useful if
your Makevars/pkgload configuration is disabling optimisation,
or \code{max} (\code{-O3} and \code{--fast-math}) which enables some
slower-to-compile and \href{https://simonbyrne.github.io/notes/fastmath/}{potentially unsafe}
optimisations.  These options are applied \emph{after}
\code{compiler_options} and may override options provided there.
Note that as for \code{compiler_options}, R will apply these \emph{before}
anything in your personal \code{Makevars}}

\item{debug}{Passed to \link[pkgbuild:compile_dll]{pkgbuild::compile_dll}, this will build a
debug library.}

\item{skip_cache}{Logical, indicating if the cache of previously
compiled systems should be skipped. If \code{TRUE} then your system will
not be looked for in the cache, nor will it be added to the
cache after compilation.}
}
\value{
A function, which can be called with no arguments to yield
a \code{dust_system_generator} function.
}
\description{
Compile a dust2 system from a C++ input file.  This function will
compile the dust support around your system and return an object
that you can call with no arguments to make a
\code{dust_system_generator} object, suitable for using with dust
functions (starting from \link{dust_system_create}).
}
